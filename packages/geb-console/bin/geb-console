#!/usr/bin/env -S node --experimental-repl-await

var repl = require('repl')
var ethers = require('ethers')
var geb_admin = require('@reflexer-finance/geb-admin')
var http = require('http')
var open = require('open')

var rpcUrl
var network
var netId
if (process.env.NETWORK === 'mainnet' || process.argv[2] === 'mainnet') {
    console.log('Start geb-console on Mainnet...')
    rpcUrl = 'https://parity0.mainnet.makerfoundation.com:8545'
    network = 'mainnet'
    netId = 1
} else if (process.env.NETWORK === 'rinkeby' || process.argv[2] === 'rinkeby') {
    console.log('Start geb-console on Rinkeby...')
    rpcUrl = 'https://rinkeby.infura.io/v3/7a5c8172af0d41fd896a18dd1d866f87'
    network = 'rinkeby'
    netId = 4
} else {
    console.log('Start geb-console on Kovan...')
    rpcUrl = 'https://parity0.kovan.makerfoundation.com:8545'
    network = 'kovan'
    netId = 42
}

if (process.env.RPC_URL) {
    rpcUrl = process.env.RPC_URL
}

console.log('\nContext objects:')
console.log('- geb                        - ethers')
console.log('- gebAdmin                   - wallet')
console.log('- contracts                  - provider')
console.log('- BigNumber                  - info(func)')
console.log('- ETH_A                      - WAD')
console.log('- RAD                        - RAY')
console.log('- metamask(<txRequest>)      - wad(<BN|number|string>)')
console.log('- ray(<BN|number|string>)    - rad(<BN|number|string>)')
console.log('- parseWad(<BN>)             - parseRay(<BN>)')
console.log('- parseRad(<BN>)\n')

var repl = repl.start({ prompt: 'ðŸ—¿ > ', useGlobal: true })

repl.context.provider = new ethers.ethers.providers.JsonRpcProvider(rpcUrl)
repl.context.geb = new geb_admin.Geb(network, repl.context.provider)
repl.context.gebAdmin = new geb_admin.GebAdmin(network, repl.context.provider)
repl.context.ETH_A = geb_admin.utils.ETH_A
repl.context.WAD = geb_admin.utils.WAD
repl.context.RAD = geb_admin.utils.RAD
repl.context.RAY = geb_admin.utils.RAY
repl.context.decodeChainError = geb_admin.utils.decodeChainError
repl.context.gebUtils = geb_admin.utils
repl.context.BigNumber = ethers.ethers.BigNumber
repl.context.ethers = ethers
repl.context.geb_lib = geb_admin
repl.context.wad = a => ethers.utils.parseEther(a.toString())
repl.context.rad = a => geb_admin.utils.decimalShift(a.toString(), 45)
repl.context.ray = a => geb_admin.utils.decimalShift(a.toString(), 27)
repl.context.parseWad = a => geb_admin.utils.wadToFixed(a).toString()
repl.context.parseRad = a => geb_admin.utils.radToFixed(a).toString()
repl.context.parseRay = a => geb_admin.utils.rayToFixed(a).toString()

repl.context.info = function (fct) {
    if (typeof fct === 'function') {
        return fct.toString().split('\n')[0].replace(' {', '')
    }
}

if (process.env.PK) {
    repl.context.wallet = new ethers.ethers.Wallet(
        process.env.PK,
        repl.context.provider
    )
}
// Metamask signer
repl.context.metamask = function (tx) {
    if(ethers.BigNumber.isBigNumber(tx.value)) {
        tx.value = tx.value.toHexString()
    }

    const strTx = JSON.stringify(tx)
    const requestListener = function (req, res) {
        res.setHeader('Content-Type', 'text/html')
        res.writeHead(200)
        res.end(`<html><body>
            <h1 style="text-align: center;">Metamask Signer</h1>
            <h1 style="text-align: center;" id="hash"></h1>
            <script src="https://cdn.ethers.io/lib/ethers-5.0.umd.min.js"
            type="application/javascript">
            </script>
            <script>
                async function main() {
                    const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
                    if(ethereum.networkVersion != ${netId}){alert("Metamask is on the wrong Network. Please change network and run the command again."); return}
                    const provider = new ethers.providers.Web3Provider(window.ethereum)
                    const signer = provider.getSigner()
                    const tx = ${strTx}
                    tx.from = accounts[0]
                    signer.sendTransaction(tx).then(p => {
                        document.getElementById("hash").innerHTML = 'Transaction hash: ' + p.hash
                    }).catch(err => {
                        function getRequireString(error){
                            let str
                            try {
                                str = JSON.stringify(error)
                            } catch {
                                return null
                            }
                            const hexerrorArray = str.match(/0x08c379a0[0-9a-fA-F]*/g)
                            if (hexerrorArray) {
                                return decodeURIComponent(
                                    hexerrorArray[0].slice(12).replace(/[0-9a-f]{2}/g, '%$&')
                                )
                                    .replace(/\0/g, '')
                                    .slice(2)
                            } else {
                                return null
                            }
                        }
                        console.error(err)
                        if(err.data == "Reverted") {
                            provider.call(${strTx}).catch(x => alert('Metamask Error ' + getRequireString(x) || err.message || err))
                        } else {
                            alert('Metamask Error ' + err.message || err)
                        }
                    })
                }
                main()
            </script>
            </body></html>`)
    }

    // Start web server
    const host = 'localhost'
    const port = 8084
    const server = http.createServer(requestListener)
    server.listen(port, host, () => {
        console.log(`Open you browser at http://${host}:${port}`)
    })

    // Shutdown server upon first load
    server.on('connection', () => server.close())

    // Open browser
    open(`http://${host}:${port}`)
}
