/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@reflexer-finance/geb-contract-base'
import { MulticallRequest } from '@reflexer-finance/geb-contract-base'
import { TransactionRequest } from '@reflexer-finance/geb-contract-base'
import { BytesLike } from '@ethersproject/bytes'
import { BigNumberish } from '@ethersproject/bignumber'
import { BigNumber } from '@ethersproject/bignumber'

export class MultiSigWallet extends BaseContractAPI {
    MAX_OWNER_COUNT(): Promise<BigNumber>
    MAX_OWNER_COUNT(multicall: true): MulticallRequest<BigNumber>
    MAX_OWNER_COUNT(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"MAX_OWNER_COUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    addOwner(owner: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"addOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [owner])
    }

    changeRequirement(_required: BigNumberish): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"_required","type":"uint256"}],"name":"changeRequirement","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [_required])
    }

    confirmTransaction(transactionId: BigNumberish): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"transactionId","type":"uint256"}],"name":"confirmTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [transactionId])
    }

    confirmations(uinteger: BigNumberish, address: string): Promise<boolean>
    confirmations(
        uinteger: BigNumberish,
        address: string,
        multicall: true
    ): MulticallRequest<boolean>
    confirmations(
        uinteger: BigNumberish,
        address: string,
        multicall?: true
    ): Promise<boolean> | MulticallRequest<boolean> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"confirmations","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [uinteger, address], multicall)
    }

    executeTransaction(transactionId: BigNumberish): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"transactionId","type":"uint256"}],"name":"executeTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [transactionId])
    }

    getConfirmationCount(transactionId: BigNumberish): Promise<BigNumber>
    getConfirmationCount(
        transactionId: BigNumberish,
        multicall: true
    ): MulticallRequest<BigNumber>
    getConfirmationCount(
        transactionId: BigNumberish,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"transactionId","type":"uint256"}],"name":"getConfirmationCount","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [transactionId], multicall)
    }

    getConfirmations(transactionId: BigNumberish): Promise<string[]>
    getConfirmations(
        transactionId: BigNumberish,
        multicall: true
    ): MulticallRequest<string[]>
    getConfirmations(
        transactionId: BigNumberish,
        multicall?: true
    ): Promise<string[]> | MulticallRequest<string[]> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"transactionId","type":"uint256"}],"name":"getConfirmations","outputs":[{"internalType":"address[]","name":"_confirmations","type":"address[]"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [transactionId], multicall)
    }

    getOwners(): Promise<string[]>
    getOwners(multicall: true): MulticallRequest<string[]>
    getOwners(
        multicall?: true
    ): Promise<string[]> | MulticallRequest<string[]> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    getTransactionCount(pending: boolean, executed: boolean): Promise<BigNumber>
    getTransactionCount(
        pending: boolean,
        executed: boolean,
        multicall: true
    ): MulticallRequest<BigNumber>
    getTransactionCount(
        pending: boolean,
        executed: boolean,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bool","name":"pending","type":"bool"},{"internalType":"bool","name":"executed","type":"bool"}],"name":"getTransactionCount","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [pending, executed], multicall)
    }

    getTransactionIds(
        from: BigNumberish,
        to: BigNumberish,
        pending: boolean,
        executed: boolean
    ): Promise<BigNumber[]>
    getTransactionIds(
        from: BigNumberish,
        to: BigNumberish,
        pending: boolean,
        executed: boolean,
        multicall: true
    ): MulticallRequest<BigNumber[]>
    getTransactionIds(
        from: BigNumberish,
        to: BigNumberish,
        pending: boolean,
        executed: boolean,
        multicall?: true
    ): Promise<BigNumber[]> | MulticallRequest<BigNumber[]> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"bool","name":"pending","type":"bool"},{"internalType":"bool","name":"executed","type":"bool"}],"name":"getTransactionIds","outputs":[{"internalType":"uint256[]","name":"_transactionIds","type":"uint256[]"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(
            abi,
            [from, to, pending, executed],
            multicall
        )
    }

    isConfirmed(transactionId: BigNumberish): Promise<boolean>
    isConfirmed(
        transactionId: BigNumberish,
        multicall: true
    ): MulticallRequest<boolean>
    isConfirmed(
        transactionId: BigNumberish,
        multicall?: true
    ): Promise<boolean> | MulticallRequest<boolean> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"transactionId","type":"uint256"}],"name":"isConfirmed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [transactionId], multicall)
    }

    isOwner(address: string): Promise<boolean>
    isOwner(address: string, multicall: true): MulticallRequest<boolean>
    isOwner(
        address: string,
        multicall?: true
    ): Promise<boolean> | MulticallRequest<boolean> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [address], multicall)
    }

    owners(uinteger: BigNumberish): Promise<string>
    owners(uinteger: BigNumberish, multicall: true): MulticallRequest<string>
    owners(
        uinteger: BigNumberish,
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"owners","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [uinteger], multicall)
    }

    removeOwner(owner: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"removeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [owner])
    }

    replaceOwner(owner: string, newOwner: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"replaceOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [owner, newOwner])
    }

    required(): Promise<BigNumber>
    required(multicall: true): MulticallRequest<BigNumber>
    required(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"required","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    revokeConfirmation(transactionId: BigNumberish): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"transactionId","type":"uint256"}],"name":"revokeConfirmation","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [transactionId])
    }

    submitTransaction(
        metadata: string,
        destination: string,
        value: BigNumberish,
        data: BytesLike
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"string","name":"metadata","type":"string"},{"internalType":"address","name":"destination","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"submitTransaction","outputs":[{"internalType":"uint256","name":"transactionId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            metadata,
            destination,
            value,
            data,
        ])
    }

    transactionCount(): Promise<BigNumber>
    transactionCount(multicall: true): MulticallRequest<BigNumber>
    transactionCount(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"transactionCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    transactions(
        uinteger: BigNumberish
    ): Promise<{
        metadata: string
        destination: string
        value: BigNumber
        data: string
        executed: boolean
    }>
    transactions(
        uinteger: BigNumberish,
        multicall: true
    ): MulticallRequest<{
        metadata: string
        destination: string
        value: BigNumber
        data: string
        executed: boolean
    }>
    transactions(
        uinteger: BigNumberish,
        multicall?: true
    ):
        | Promise<{
              metadata: string
              destination: string
              value: BigNumber
              data: string
              executed: boolean
          }>
        | MulticallRequest<{
              metadata: string
              destination: string
              value: BigNumber
              data: string
              executed: boolean
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"transactions","outputs":[{"internalType":"string","name":"metadata","type":"string"},{"internalType":"address","name":"destination","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"executed","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [uinteger], multicall)
    }
}
