/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@reflexer-finance/geb-contract-base'
import { MulticallRequest } from '@reflexer-finance/geb-contract-base'
import { TransactionRequest } from '@reflexer-finance/geb-contract-base'
import { BytesLike } from '@ethersproject/bytes'
import { BigNumberish } from '@ethersproject/bignumber'
import { BigNumber } from '@ethersproject/bignumber'

export class GovProtester extends BaseContractAPI {
    BALLOT_TYPEHASH(): Promise<string>
    BALLOT_TYPEHASH(multicall: true): MulticallRequest<string>
    BALLOT_TYPEHASH(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"BALLOT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    DOMAIN_TYPEHASH(): Promise<string>
    DOMAIN_TYPEHASH(multicall: true): MulticallRequest<string>
    DOMAIN_TYPEHASH(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"DOMAIN_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    RAY(): Promise<BigNumber>
    RAY(multicall: true): MulticallRequest<BigNumber>
    RAY(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"RAY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    averageBlockTime(): Promise<BigNumber>
    averageBlockTime(multicall: true): MulticallRequest<BigNumber>
    averageBlockTime(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"averageBlockTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    cancel(proposalId: BigNumberish): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256"}],"name":"cancel","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [proposalId])
    }

    castVote(proposalId: BigNumberish, support: boolean): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256"},{"internalType":"bool","name":"support","type":"bool"}],"name":"castVote","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [proposalId, support])
    }

    castVoteBySig(
        proposalId: BigNumberish,
        support: boolean,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256"},{"internalType":"bool","name":"support","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"castVoteBySig","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [proposalId, support, v, r, s])
    }

    execute(
        ethValue: BigNumberish,
        proposalId: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256"}],"name":"execute","outputs":[],"stateMutability":"payable","type":"function"}

        return this.getTransactionRequest(
            abi,
            [proposalId],
            BigNumber.from(ethValue)
        )
    }

    getActions(
        proposalId: BigNumberish
    ): Promise<{
        targets: string[]
        signatures: string[]
        calldatas: string[]
    }>
    getActions(
        proposalId: BigNumberish,
        multicall: true
    ): MulticallRequest<{
        targets: string[]
        signatures: string[]
        calldatas: string[]
    }>
    getActions(
        proposalId: BigNumberish,
        multicall?: true
    ):
        | Promise<{
              targets: string[]
              signatures: string[]
              calldatas: string[]
          }>
        | MulticallRequest<{
              targets: string[]
              signatures: string[]
              calldatas: string[]
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256"}],"name":"getActions","outputs":[{"internalType":"address[]","name":"targets","type":"address[]"},{"internalType":"bytes32[]","name":"signatures","type":"bytes32[]"},{"internalType":"bytes[]","name":"calldatas","type":"bytes[]"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [proposalId], multicall)
    }

    getReceipt(
        proposalId: BigNumberish,
        voter: string
    ): Promise<{
        hasVoted: boolean
        support: boolean
        votes: BigNumber
        0: boolean
        1: boolean
        2: BigNumber
    }>
    getReceipt(
        proposalId: BigNumberish,
        voter: string,
        multicall: true
    ): MulticallRequest<{
        hasVoted: boolean
        support: boolean
        votes: BigNumber
        0: boolean
        1: boolean
        2: BigNumber
    }>
    getReceipt(
        proposalId: BigNumberish,
        voter: string,
        multicall?: true
    ):
        | Promise<{
              hasVoted: boolean
              support: boolean
              votes: BigNumber
              0: boolean
              1: boolean
              2: BigNumber
          }>
        | MulticallRequest<{
              hasVoted: boolean
              support: boolean
              votes: BigNumber
              0: boolean
              1: boolean
              2: BigNumber
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256"},{"internalType":"address","name":"voter","type":"address"}],"name":"getReceipt","outputs":[{"components":[{"internalType":"bool","name":"hasVoted","type":"bool"},{"internalType":"bool","name":"support","type":"bool"},{"internalType":"uint256","name":"votes","type":"uint256"}],"internalType":"struct GovProtester.Receipt","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [proposalId, voter], multicall)
    }

    lastQuorumIncreaseTime(): Promise<BigNumber>
    lastQuorumIncreaseTime(multicall: true): MulticallRequest<BigNumber>
    lastQuorumIncreaseTime(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"lastQuorumIncreaseTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    lastThresholdIncreaseTime(): Promise<BigNumber>
    lastThresholdIncreaseTime(multicall: true): MulticallRequest<BigNumber>
    lastThresholdIncreaseTime(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"lastThresholdIncreaseTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    latestProposalIds(address: string): Promise<BigNumber>
    latestProposalIds(
        address: string,
        multicall: true
    ): MulticallRequest<BigNumber>
    latestProposalIds(
        address: string,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"latestProposalIds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [address], multicall)
    }

    maxProposalThreshold(): Promise<BigNumber>
    maxProposalThreshold(multicall: true): MulticallRequest<BigNumber>
    maxProposalThreshold(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"maxProposalThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    maxQuorumVotes(): Promise<BigNumber>
    maxQuorumVotes(multicall: true): MulticallRequest<BigNumber>
    maxQuorumVotes(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"maxQuorumVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    name(): Promise<string>
    name(multicall: true): MulticallRequest<string>
    name(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    pause(): Promise<string>
    pause(multicall: true): MulticallRequest<string>
    pause(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"pause","outputs":[{"internalType":"contract DSProtestPauseInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    proposalCount(): Promise<BigNumber>
    proposalCount(multicall: true): MulticallRequest<BigNumber>
    proposalCount(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"proposalCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    proposalMaxOperations(): Promise<BigNumber>
    proposalMaxOperations(multicall: true): MulticallRequest<BigNumber>
    proposalMaxOperations(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"proposalMaxOperations","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    proposalThreshold(): Promise<BigNumber>
    proposalThreshold(multicall: true): MulticallRequest<BigNumber>
    proposalThreshold(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"proposalThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    proposalThresholdChange(): Promise<BigNumber>
    proposalThresholdChange(multicall: true): MulticallRequest<BigNumber>
    proposalThresholdChange(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"proposalThresholdChange","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    proposals(
        uinteger: BigNumberish
    ): Promise<{
        id: BigNumber
        proposer: string
        minQuorum: BigNumber
        startTime: BigNumber
        startBlock: BigNumber
        lifetimeEndBlock: BigNumber
        forVotes: BigNumber
        againstVotes: BigNumber
        canceled: boolean
        executed: boolean
    }>
    proposals(
        uinteger: BigNumberish,
        multicall: true
    ): MulticallRequest<{
        id: BigNumber
        proposer: string
        minQuorum: BigNumber
        startTime: BigNumber
        startBlock: BigNumber
        lifetimeEndBlock: BigNumber
        forVotes: BigNumber
        againstVotes: BigNumber
        canceled: boolean
        executed: boolean
    }>
    proposals(
        uinteger: BigNumberish,
        multicall?: true
    ):
        | Promise<{
              id: BigNumber
              proposer: string
              minQuorum: BigNumber
              startTime: BigNumber
              startBlock: BigNumber
              lifetimeEndBlock: BigNumber
              forVotes: BigNumber
              againstVotes: BigNumber
              canceled: boolean
              executed: boolean
          }>
        | MulticallRequest<{
              id: BigNumber
              proposer: string
              minQuorum: BigNumber
              startTime: BigNumber
              startBlock: BigNumber
              lifetimeEndBlock: BigNumber
              forVotes: BigNumber
              againstVotes: BigNumber
              canceled: boolean
              executed: boolean
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"proposals","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"proposer","type":"address"},{"internalType":"uint256","name":"minQuorum","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"startBlock","type":"uint256"},{"internalType":"uint256","name":"lifetimeEndBlock","type":"uint256"},{"internalType":"uint256","name":"forVotes","type":"uint256"},{"internalType":"uint256","name":"againstVotes","type":"uint256"},{"internalType":"bool","name":"canceled","type":"bool"},{"internalType":"bool","name":"executed","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [uinteger], multicall)
    }

    propose(
        usrs: string[],
        codeHashes: BytesLike[],
        parameters: BytesLike[],
        description: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address[]","name":"usrs","type":"address[]"},{"internalType":"bytes32[]","name":"codeHashes","type":"bytes32[]"},{"internalType":"bytes[]","name":"parameters","type":"bytes[]"},{"internalType":"string","name":"description","type":"string"}],"name":"propose","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            usrs,
            codeHashes,
            parameters,
            description,
        ])
    }

    protocolToken(): Promise<string>
    protocolToken(multicall: true): MulticallRequest<string>
    protocolToken(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"protocolToken","outputs":[{"internalType":"contract DSTokenInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    quorumVotes(): Promise<BigNumber>
    quorumVotes(multicall: true): MulticallRequest<BigNumber>
    quorumVotes(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"quorumVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    quorumVotesChange(): Promise<BigNumber>
    quorumVotesChange(multicall: true): MulticallRequest<BigNumber>
    quorumVotesChange(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"quorumVotesChange","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    state(proposalId: BigNumberish): Promise<number>
    state(proposalId: BigNumberish, multicall: true): MulticallRequest<number>
    state(
        proposalId: BigNumberish,
        multicall?: true
    ): Promise<number> | MulticallRequest<number> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256"}],"name":"state","outputs":[{"internalType":"enum GovProtester.ProposalState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [proposalId], multicall)
    }

    thresholdsIncreaseStartTime(): Promise<BigNumber>
    thresholdsIncreaseStartTime(multicall: true): MulticallRequest<BigNumber>
    thresholdsIncreaseStartTime(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"thresholdsIncreaseStartTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    updateProposalThreshold(): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"updateProposalThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [])
    }

    updateQuorumVotes(): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"updateQuorumVotes","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [])
    }

    votingDelay(): Promise<BigNumber>
    votingDelay(multicall: true): MulticallRequest<BigNumber>
    votingDelay(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"votingDelay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }
}
