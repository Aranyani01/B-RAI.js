/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@reflexer-finance/geb-provider'
import { TransactionRequest } from '@reflexer-finance/geb-provider'
import { BytesLike } from '@ethersproject/bytes'
import { BigNumberish } from '@ethersproject/bignumber'

export class GebProxyActions extends BaseContractAPI {
    allowHandler(
        manager: string,
        usr: string,
        ok: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"usr","type":"address"},{"internalType":"uint256","name":"ok","type":"uint256"}],"name":"allowHandler","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, usr, ok])
    }

    allowSAFE(
        manager: string,
        safe: BigNumberish,
        usr: string,
        ok: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"usr","type":"address"},{"internalType":"uint256","name":"ok","type":"uint256"}],"name":"allowSAFE","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, safe, usr, ok])
    }

    approveSAFEModification(
        obj: string,
        usr: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"obj","type":"address"},{"internalType":"address","name":"usr","type":"address"}],"name":"approveSAFEModification","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [obj, usr])
    }

    coinJoin_join(
        apt: string,
        safeHandler: string,
        wad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"apt","type":"address"},{"internalType":"address","name":"safeHandler","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"coinJoin_join","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [apt, safeHandler, wad])
    }

    denySAFEModification(
        obj: string,
        usr: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"obj","type":"address"},{"internalType":"address","name":"usr","type":"address"}],"name":"denySAFEModification","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [obj, usr])
    }

    enterSystem(
        manager: string,
        src: string,
        safe: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"src","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"}],"name":"enterSystem","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, src, safe])
    }

    ethJoin_join(apt: string, safe: string): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"apt","type":"address"},{"internalType":"address","name":"safe","type":"address"}],"name":"ethJoin_join","outputs":[],"stateMutability":"payable","type":"function"}

        return this.ethSend(abi, [apt, safe])
    }

    exitETH(
        manager: string,
        ethJoin: string,
        safe: BigNumberish,
        wad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"exitETH","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, ethJoin, safe, wad])
    }

    exitTokenCollateral(
        manager: string,
        collateralJoin: string,
        safe: BigNumberish,
        amt: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"collateralJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"amt","type":"uint256"}],"name":"exitTokenCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, collateralJoin, safe, amt])
    }

    freeETH(
        manager: string,
        ethJoin: string,
        safe: BigNumberish,
        wad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"freeETH","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, ethJoin, safe, wad])
    }

    freeTokenCollateral(
        manager: string,
        collateralJoin: string,
        safe: BigNumberish,
        amt: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"collateralJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"amt","type":"uint256"}],"name":"freeTokenCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, collateralJoin, safe, amt])
    }

    generateDebt(
        manager: string,
        taxCollector: string,
        coinJoin: string,
        safe: BigNumberish,
        wad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"generateDebt","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, taxCollector, coinJoin, safe, wad])
    }

    generateDebtAndProtectSAFE(
        manager: string,
        taxCollector: string,
        coinJoin: string,
        safe: BigNumberish,
        wad: BigNumberish,
        liquidationEngine: string,
        saviour: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"wad","type":"uint256"},{"internalType":"address","name":"liquidationEngine","type":"address"},{"internalType":"address","name":"saviour","type":"address"}],"name":"generateDebtAndProtectSAFE","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            taxCollector,
            coinJoin,
            safe,
            wad,
            liquidationEngine,
            saviour,
        ])
    }

    lockETH(
        manager: string,
        ethJoin: string,
        safe: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"}],"name":"lockETH","outputs":[],"stateMutability":"payable","type":"function"}

        return this.ethSend(abi, [manager, ethJoin, safe])
    }

    lockETHAndGenerateDebt(
        manager: string,
        taxCollector: string,
        ethJoin: string,
        coinJoin: string,
        safe: BigNumberish,
        deltaWad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"deltaWad","type":"uint256"}],"name":"lockETHAndGenerateDebt","outputs":[],"stateMutability":"payable","type":"function"}

        return this.ethSend(abi, [
            manager,
            taxCollector,
            ethJoin,
            coinJoin,
            safe,
            deltaWad,
        ])
    }

    lockTokenCollateral(
        manager: string,
        collateralJoin: string,
        safe: BigNumberish,
        amt: BigNumberish,
        transferFrom: boolean
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"collateralJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"amt","type":"uint256"},{"internalType":"bool","name":"transferFrom","type":"bool"}],"name":"lockTokenCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            collateralJoin,
            safe,
            amt,
            transferFrom,
        ])
    }

    lockTokenCollateralAndGenerateDebt(
        manager: string,
        taxCollector: string,
        collateralJoin: string,
        coinJoin: string,
        safe: BigNumberish,
        collateralAmount: BigNumberish,
        deltaWad: BigNumberish,
        transferFrom: boolean
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"collateralJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"collateralAmount","type":"uint256"},{"internalType":"uint256","name":"deltaWad","type":"uint256"},{"internalType":"bool","name":"transferFrom","type":"bool"}],"name":"lockTokenCollateralAndGenerateDebt","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            taxCollector,
            collateralJoin,
            coinJoin,
            safe,
            collateralAmount,
            deltaWad,
            transferFrom,
        ])
    }

    lockTokenCollateralGenerateDebtAndProtectSAFE(
        manager: string,
        taxCollector: string,
        collateralJoin: string,
        coinJoin: string,
        safe: BigNumberish,
        collateralAmount: BigNumberish,
        deltaWad: BigNumberish,
        transferFrom: boolean,
        liquidationEngine: string,
        saviour: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"collateralJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"collateralAmount","type":"uint256"},{"internalType":"uint256","name":"deltaWad","type":"uint256"},{"internalType":"bool","name":"transferFrom","type":"bool"},{"internalType":"address","name":"liquidationEngine","type":"address"},{"internalType":"address","name":"saviour","type":"address"}],"name":"lockTokenCollateralGenerateDebtAndProtectSAFE","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            taxCollector,
            collateralJoin,
            coinJoin,
            safe,
            collateralAmount,
            deltaWad,
            transferFrom,
            liquidationEngine,
            saviour,
        ])
    }

    makeCollateralBag(collateralJoin: string): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"collateralJoin","type":"address"}],"name":"makeCollateralBag","outputs":[{"internalType":"address","name":"bag","type":"address"}],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [collateralJoin])
    }

    modifySAFECollateralization(
        manager: string,
        safe: BigNumberish,
        deltaCollateral: BigNumberish,
        deltaDebt: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"int256","name":"deltaCollateral","type":"int256"},{"internalType":"int256","name":"deltaDebt","type":"int256"}],"name":"modifySAFECollateralization","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, safe, deltaCollateral, deltaDebt])
    }

    moveSAFE(
        manager: string,
        safeSrc: BigNumberish,
        safeDst: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safeSrc","type":"uint256"},{"internalType":"uint256","name":"safeDst","type":"uint256"}],"name":"moveSAFE","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, safeSrc, safeDst])
    }

    openLockETHAndGenerateDebt(
        manager: string,
        taxCollector: string,
        ethJoin: string,
        coinJoin: string,
        collateralType: BytesLike,
        deltaWad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"uint256","name":"deltaWad","type":"uint256"}],"name":"openLockETHAndGenerateDebt","outputs":[{"internalType":"uint256","name":"safe","type":"uint256"}],"stateMutability":"payable","type":"function"}

        return this.ethSend(abi, [
            manager,
            taxCollector,
            ethJoin,
            coinJoin,
            collateralType,
            deltaWad,
        ])
    }

    openLockETHGenerateDebtAndProtectSAFE(
        manager: string,
        taxCollector: string,
        ethJoin: string,
        coinJoin: string,
        collateralType: BytesLike,
        deltaWad: BigNumberish,
        liquidationEngine: string,
        saviour: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"uint256","name":"deltaWad","type":"uint256"},{"internalType":"address","name":"liquidationEngine","type":"address"},{"internalType":"address","name":"saviour","type":"address"}],"name":"openLockETHGenerateDebtAndProtectSAFE","outputs":[{"internalType":"uint256","name":"safe","type":"uint256"}],"stateMutability":"payable","type":"function"}

        return this.ethSend(abi, [
            manager,
            taxCollector,
            ethJoin,
            coinJoin,
            collateralType,
            deltaWad,
            liquidationEngine,
            saviour,
        ])
    }

    openLockGNTAndGenerateDebt(
        manager: string,
        taxCollector: string,
        gntJoin: string,
        coinJoin: string,
        collateralType: BytesLike,
        collateralAmount: BigNumberish,
        deltaWad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"gntJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"uint256","name":"collateralAmount","type":"uint256"},{"internalType":"uint256","name":"deltaWad","type":"uint256"}],"name":"openLockGNTAndGenerateDebt","outputs":[{"internalType":"address","name":"bag","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            taxCollector,
            gntJoin,
            coinJoin,
            collateralType,
            collateralAmount,
            deltaWad,
        ])
    }

    openLockGNTGenerateDebtAndProtectSAFE(
        manager: string,
        taxCollector: string,
        gntJoin: string,
        coinJoin: string,
        collateralType: BytesLike,
        collateralAmount: BigNumberish,
        deltaWad: BigNumberish,
        liquidationEngine: string,
        saviour: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"gntJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"uint256","name":"collateralAmount","type":"uint256"},{"internalType":"uint256","name":"deltaWad","type":"uint256"},{"internalType":"address","name":"liquidationEngine","type":"address"},{"internalType":"address","name":"saviour","type":"address"}],"name":"openLockGNTGenerateDebtAndProtectSAFE","outputs":[{"internalType":"address","name":"bag","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            taxCollector,
            gntJoin,
            coinJoin,
            collateralType,
            collateralAmount,
            deltaWad,
            liquidationEngine,
            saviour,
        ])
    }

    openLockTokenCollateralAndGenerateDebt(
        manager: string,
        taxCollector: string,
        collateralJoin: string,
        coinJoin: string,
        collateralType: BytesLike,
        collateralAmount: BigNumberish,
        deltaWad: BigNumberish,
        transferFrom: boolean
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"collateralJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"uint256","name":"collateralAmount","type":"uint256"},{"internalType":"uint256","name":"deltaWad","type":"uint256"},{"internalType":"bool","name":"transferFrom","type":"bool"}],"name":"openLockTokenCollateralAndGenerateDebt","outputs":[{"internalType":"uint256","name":"safe","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            taxCollector,
            collateralJoin,
            coinJoin,
            collateralType,
            collateralAmount,
            deltaWad,
            transferFrom,
        ])
    }

    openLockTokenCollateralGenerateDebtAndProtectSAFE(
        manager: string,
        taxCollector: string,
        collateralJoin: string,
        coinJoin: string,
        collateralType: BytesLike,
        collateralAmount: BigNumberish,
        deltaWad: BigNumberish,
        transferFrom: boolean,
        liquidationEngine: string,
        saviour: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"collateralJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"uint256","name":"collateralAmount","type":"uint256"},{"internalType":"uint256","name":"deltaWad","type":"uint256"},{"internalType":"bool","name":"transferFrom","type":"bool"},{"internalType":"address","name":"liquidationEngine","type":"address"},{"internalType":"address","name":"saviour","type":"address"}],"name":"openLockTokenCollateralGenerateDebtAndProtectSAFE","outputs":[{"internalType":"uint256","name":"safe","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            taxCollector,
            collateralJoin,
            coinJoin,
            collateralType,
            collateralAmount,
            deltaWad,
            transferFrom,
            liquidationEngine,
            saviour,
        ])
    }

    openSAFE(
        manager: string,
        collateralType: BytesLike,
        usr: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"address","name":"usr","type":"address"}],"name":"openSAFE","outputs":[{"internalType":"uint256","name":"safe","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, collateralType, usr])
    }

    protectSAFE(
        manager: string,
        safe: BigNumberish,
        liquidationEngine: string,
        saviour: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"liquidationEngine","type":"address"},{"internalType":"address","name":"saviour","type":"address"}],"name":"protectSAFE","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, safe, liquidationEngine, saviour])
    }

    quitSystem(
        manager: string,
        safe: BigNumberish,
        dst: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"dst","type":"address"}],"name":"quitSystem","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, safe, dst])
    }

    repayAllDebt(
        manager: string,
        coinJoin: string,
        safe: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"}],"name":"repayAllDebt","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, coinJoin, safe])
    }

    repayAllDebtAndFreeETH(
        manager: string,
        ethJoin: string,
        coinJoin: string,
        safe: BigNumberish,
        collateralWad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"collateralWad","type":"uint256"}],"name":"repayAllDebtAndFreeETH","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            ethJoin,
            coinJoin,
            safe,
            collateralWad,
        ])
    }

    repayAllDebtAndFreeTokenCollateral(
        manager: string,
        collateralJoin: string,
        coinJoin: string,
        safe: BigNumberish,
        collateralAmount: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"collateralJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"collateralAmount","type":"uint256"}],"name":"repayAllDebtAndFreeTokenCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            collateralJoin,
            coinJoin,
            safe,
            collateralAmount,
        ])
    }

    repayDebt(
        manager: string,
        coinJoin: string,
        safe: BigNumberish,
        wad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"repayDebt","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, coinJoin, safe, wad])
    }

    repayDebtAndFreeETH(
        manager: string,
        ethJoin: string,
        coinJoin: string,
        safe: BigNumberish,
        collateralWad: BigNumberish,
        deltaWad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"collateralWad","type":"uint256"},{"internalType":"uint256","name":"deltaWad","type":"uint256"}],"name":"repayDebtAndFreeETH","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            ethJoin,
            coinJoin,
            safe,
            collateralWad,
            deltaWad,
        ])
    }

    repayDebtAndFreeTokenCollateral(
        manager: string,
        collateralJoin: string,
        coinJoin: string,
        safe: BigNumberish,
        collateralAmount: BigNumberish,
        deltaWad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"collateralJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"collateralAmount","type":"uint256"},{"internalType":"uint256","name":"deltaWad","type":"uint256"}],"name":"repayDebtAndFreeTokenCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            collateralJoin,
            coinJoin,
            safe,
            collateralAmount,
            deltaWad,
        ])
    }

    safeLockETH(
        manager: string,
        ethJoin: string,
        safe: BigNumberish,
        owner: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"safeLockETH","outputs":[],"stateMutability":"payable","type":"function"}

        return this.ethSend(abi, [manager, ethJoin, safe, owner])
    }

    safeLockTokenCollateral(
        manager: string,
        collateralJoin: string,
        safe: BigNumberish,
        amt: BigNumberish,
        transferFrom: boolean,
        owner: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"collateralJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"amt","type":"uint256"},{"internalType":"bool","name":"transferFrom","type":"bool"},{"internalType":"address","name":"owner","type":"address"}],"name":"safeLockTokenCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [
            manager,
            collateralJoin,
            safe,
            amt,
            transferFrom,
            owner,
        ])
    }

    safeRepayAllDebt(
        manager: string,
        coinJoin: string,
        safe: BigNumberish,
        owner: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"safeRepayAllDebt","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, coinJoin, safe, owner])
    }

    safeRepayDebt(
        manager: string,
        coinJoin: string,
        safe: BigNumberish,
        wad: BigNumberish,
        owner: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"wad","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"safeRepayDebt","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, coinJoin, safe, wad, owner])
    }

    tokenCollateralJoin_join(
        apt: string,
        safe: string,
        amt: BigNumberish,
        transferFrom: boolean
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"apt","type":"address"},{"internalType":"address","name":"safe","type":"address"},{"internalType":"uint256","name":"amt","type":"uint256"},{"internalType":"bool","name":"transferFrom","type":"bool"}],"name":"tokenCollateralJoin_join","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [apt, safe, amt, transferFrom])
    }

    transfer(
        collateral: string,
        dst: string,
        amt: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"collateral","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amt","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [collateral, dst, amt])
    }

    transferCollateral(
        manager: string,
        safe: BigNumberish,
        dst: string,
        wad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"transferCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, safe, dst, wad])
    }

    transferInternalCoins(
        manager: string,
        safe: BigNumberish,
        dst: string,
        rad: BigNumberish
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"rad","type":"uint256"}],"name":"transferInternalCoins","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, safe, dst, rad])
    }

    transferSAFEOwnership(
        manager: string,
        safe: BigNumberish,
        usr: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"usr","type":"address"}],"name":"transferSAFEOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [manager, safe, usr])
    }

    transferSAFEOwnershipToProxy(
        proxyRegistry: string,
        manager: string,
        safe: BigNumberish,
        dst: string
    ): Promise<TransactionRequest> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"proxyRegistry","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"dst","type":"address"}],"name":"transferSAFEOwnershipToProxy","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.ethSend(abi, [proxyRegistry, manager, safe, dst])
    }
}
