/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@reflexer-finance/geb-contract-base'
import { MulticallRequest } from '@reflexer-finance/geb-contract-base'
import { BigNumberish } from '@ethersproject/bignumber'
import { BigNumber } from '@ethersproject/bignumber'

export class PiRawPerSecondValidator extends BaseContractAPI {
    adi(): Promise<BigNumber>
    adi(multicall: true): MulticallRequest<BigNumber>
    adi(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"adi","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    ag(): Promise<BigNumber>
    ag(multicall: true): MulticallRequest<BigNumber>
    ag(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"ag","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    dgt(): Promise<BigNumber>
    dgt(multicall: true): MulticallRequest<BigNumber>
    dgt(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"dgt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    dos(
        i: BigNumberish
    ): Promise<{
        0: BigNumber
        1: BigNumber
        2: BigNumber
    }>
    dos(
        i: BigNumberish,
        multicall: true
    ): MulticallRequest<{
        0: BigNumber
        1: BigNumber
        2: BigNumber
    }>
    dos(
        i: BigNumberish,
        multicall?: true
    ):
        | Promise<{
              0: BigNumber
              1: BigNumber
              2: BigNumber
          }>
        | MulticallRequest<{
              0: BigNumber
              1: BigNumber
              2: BigNumber
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"i","type":"uint256"}],"name":"dos","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"int256","name":"","type":"int256"},{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [i], multicall)
    }

    drr(): Promise<BigNumber>
    drr(multicall: true): MulticallRequest<BigNumber>
    drr(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"drr","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    folb(): Promise<BigNumber>
    folb(multicall: true): MulticallRequest<BigNumber>
    folb(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"folb","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    foub(): Promise<BigNumber>
    foub(multicall: true): MulticallRequest<BigNumber>
    foub(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"foub","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    hcd(i: BigNumberish): Promise<BigNumber>
    hcd(i: BigNumberish, multicall: true): MulticallRequest<BigNumber>
    hcd(
        i: BigNumberish,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"i","type":"uint256"}],"name":"hcd","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [i], multicall)
    }

    ips(): Promise<BigNumber>
    ips(multicall: true): MulticallRequest<BigNumber>
    ips(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"ips","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    lprad(): Promise<BigNumber>
    lprad(multicall: true): MulticallRequest<BigNumber>
    lprad(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"lprad","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    lut(): Promise<BigNumber>
    lut(multicall: true): MulticallRequest<BigNumber>
    lut(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"lut","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    mrt(): Promise<BigNumber>
    mrt(multicall: true): MulticallRequest<BigNumber>
    mrt(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"mrt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    nb(): Promise<BigNumber>
    nb(multicall: true): MulticallRequest<BigNumber>
    nb(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"nb","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    oll(): Promise<BigNumber>
    oll(multicall: true): MulticallRequest<BigNumber>
    oll(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"oll","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    pdc(): Promise<BigNumber>
    pdc(multicall: true): MulticallRequest<BigNumber>
    pdc(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"pdc","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    pscl(): Promise<BigNumber>
    pscl(multicall: true): MulticallRequest<BigNumber>
    pscl(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"pscl","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    rt(
        marketPrice: BigNumberish,
        redemptionPrice: BigNumberish,
        accumulatedLeak: BigNumberish
    ): Promise<BigNumber>
    rt(
        marketPrice: BigNumberish,
        redemptionPrice: BigNumberish,
        accumulatedLeak: BigNumberish,
        multicall: true
    ): MulticallRequest<BigNumber>
    rt(
        marketPrice: BigNumberish,
        redemptionPrice: BigNumberish,
        accumulatedLeak: BigNumberish,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"marketPrice","type":"uint256"},{"internalType":"uint256","name":"redemptionPrice","type":"uint256"},{"internalType":"uint256","name":"accumulatedLeak","type":"uint256"}],"name":"rt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(
            abi,
            [marketPrice, redemptionPrice, accumulatedLeak],
            multicall
        )
    }

    sg(): Promise<BigNumber>
    sg(multicall: true): MulticallRequest<BigNumber>
    sg(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"sg","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    tlv(): Promise<BigNumber>
    tlv(multicall: true): MulticallRequest<BigNumber>
    tlv(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"tlv","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    uprad(): Promise<BigNumber>
    uprad(multicall: true): MulticallRequest<BigNumber>
    uprad(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"uprad","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }
}
